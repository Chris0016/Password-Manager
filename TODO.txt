TODO:

    client side validation:
    Js Validation:

        Registration: validation on client to check that password contains required characters. 
        Registration: disabled button until all fields are complete and valid. 
        Registration: Light email check

        lOGIN: Max input length constraint on username and password
        lOGIN: Disable login button until fields are valid

        ADD ACCOUNT: max and min number of characters constraint
   
    

    Error handling 
        Front end
        Back end(SQL Exceptions?)

    Thymeleaf templating fix. Reuse components like navbar instead of writing them all over again. 
    Navigation Bar Fix
    Error messages on bad input(Check Regristration)
  
    Styling

    Automation and Testing Module(database automation tool and puppeter testing)

         Test if post mapping works without the th:field inside of the input tags(update-account.html).
    
    Security+:
        Validate IP address:
            OWASP REGEX:
                ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
    

Changes made:
     Server Side Validation:
        Do not accept odd characters. (Cross site scripting, SQL Injection attacks...)
        @Pattern annotation added for 
            User:
                Username(email)
                ...
            Account:
                Username
                Password -> Loose constraints because passwords are for external accounts.

        Not necessary for User password field bc it gets hashed before being stored.

        Custom Password Validation for registration. https://stackabuse.com/spring-custom-password-validation/

        SQL Server validation: 
            https://emailregex.com/
            https://stackoverflow.com/questions/15560004/mysql-check-constraint-for-email-addresses
            Email Constraint added:
                ALTER TABLE `user` 
                ADD CONSTRAINT `user.email_validation` 
                CHECK (`email` REGEXP "^[a-zA-Z0-9][a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]*?[a-zA-Z0-9._-]?@[a-zA-Z0-9][a-zA-Z0-9._-]*?[a-zA-Z0-9]?\\.[a-zA-Z]{2,63}$");

            SQL Constraints not added for other fields because they will ultimately be stored in an encrypted format.
                Therefore the sql validation will be defunct due to the other fields being in their altered state. 


        Remove custom password annotation and just use regex and size annotations?  
       
